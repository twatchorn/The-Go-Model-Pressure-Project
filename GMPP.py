import numpy as np
import mdtraj as md
from itertools import combinations
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
import glob as glob
import os
import subprocess as subprocess
import pexpect as pexpect
import sys
import argparse
import scipy.constants as c
import matplotlib.ticker as ticker


import tprgenie as tg
import Contacts as cont
import PDBmod as pm
import maketable as table
import XTCconversion as xtc
import WHAM
import xvgenie as xvg
import BimodalTest as bt
import Landscape as ls

def main():

    parser = argparse.ArgumentParser(description='Intake the working directory to generate, execute and analyze Gromacs files')
    parser.add_argument('directory', help='Path to the directory')
    args = parser.parse_args()

    # Use the directory argument
    directory_path = args.directory
    return directory_path

if __name__ == '__main__':
    wrkdir = main()

#----------------------------------------------------------------------------------------------------------------
# Settings
# 
# The script is designed to use the coarse grained files from the Smog-Server https://smog-server.org/prepare_a_simulation.html
#
# 
# the script is setup to take the working directory as an argument in the terminal i.e. python GMPP.py /path/to/working/directory
# or you can comment out lines 20-30 and uncomment line 40 to manually input the working directory in the script, keep in mind that if you do this you will have to change it
# every time you run the script for a new system 
#wrkdir = '/path/to/working/directory'

cut_off = 1.2
# cutoff = 1.2 means residues within 120% of their native range will be considered in contact for the Q(t) plot generated by contacts.py
# The range is only necessary for Calpha simulations, if using all atom simulations change cut_off to an integer value ~0.5 nm (5 Ã…) is standard. If you go less than 2 nm (not recommended) you will have to modify the code in contacts.py line 92
# you are free to change this range if it seems necessary, however 120% is a good starting point for most cases the minimum in contact distance is 70% of the native range
# to account for false positives in the simulation from misfolding or kinetic flucuation. 
tlow, thigh = 80, 120
# trng is the starting range of temperatures you would like ot test your system with, 100-140K is a good starting point
#
dt = 1
# dt chooses the temeprature step in kelvin between each .tpr file
#
r = 8.5
# r is the table length in nm
# 8.5 is the relative minimum allowed by gromacs
# 
#
#
#----------------------------------------------------------------------------------------------------------------
# End Settings
#
output_folder = f'{wrkdir}/MDOutputFiles'
os.makedirs(output_folder, exist_ok = True)
foldingtemp = 0
with open(f'{wrkdir}/GMPP log.txt', 'w') as f:
    f.write('GMPP log\n')
    f.write(f'Files will be saved to {output_folder}\n')
    f.write('Generating Potential Energy Lookup Table\n')
table.tablegen(r)
#  
#
rc = 0

sysnm = "protein"  


max_iterations = 3  
iteration = 0

while iteration < max_iterations:
    try:
        with open(f'{wrkdir}/GMPP log.txt', 'a') as f:
            f.write(f'Iteration {iteration + 1}: Generating TPR Files for temperature range {tlow}-{thigh}K\n')
        
        
        tg.tprgen(tlow, thigh, dt, wrkdir)
        dirt = glob.glob('*#')
        for file in dirt:
            os.remove(file)
    except Exception as e:
        with open(f'{wrkdir}/GMPP log.txt', 'a') as f:
            f.write(f'Error generating TPR files: {e}\n')
        break  # Exit on TPR generation failure

    # Check if any .tpr files were actually created
    tpr_files = glob.glob(f'{wrkdir}/*.tpr')
    if len(tpr_files) == 0:
        with open(f'{wrkdir}/GMPP log.txt', 'a') as f:
            f.write('No TPR files found after generation. Check input files.\n')
        break

    # Check if simulations actually ran (look for .xtc files)
    xtc_files = glob.glob(f'{wrkdir}/*.xtc')
    dirt = glob.glob('*#')

    for file in dirt:

        os.remove(file)
    if not xtc_files:
        with open(f'{wrkdir}/GMPP log.txt', 'a') as f:
            f.write('No XTC files found. Simulations may not have run successfully.\n')
        break
       

    try:
        with open(f'{wrkdir}/GMPP log.txt', 'a') as f:
            f.write('Generating Coarse Grained PDBs for RMSD Analysis and .xtc Conversions\n')
        pm.coarspdb(wrkdir)
    except Exception as e:
        with open(f'{wrkdir}/GMPP log.txt', 'a') as f:
            f.write(f'Error generating coarse grained PDBs: {e}\n')

    try:
        with open(f'{wrkdir}/GMPP log.txt', 'a') as f:
            f.write('Generating XTC Files\n')
        xtc.xtcmods(wrkdir)
        dirt = glob.glob('*#')

        for file in dirt:

            os.remove(file)
    except Exception as e:
        with open(f'{wrkdir}/GMPP log.txt', 'a') as f:
            f.write(f'Error generating XTC files: {e}\n')

    try:
        with open(f'{wrkdir}/GMPP log.txt', 'a') as f:
            f.write('Performing Contact Analysis\n')
        cont.contactgraphs(cut_off, output_folder)
        
        
        
                
    except Exception as e:
        with open(f'{wrkdir}/GMPP log.txt', 'a') as f:
            f.write(f'Error performing contact analysis: {e}\n')

    try:
        with open(f'{wrkdir}/GMPP log.txt', 'a') as f:
            f.write('Generating XVG Files\n')
        xvg.xvgenie(wrkdir)
        dirt = glob.glob('*#')

        for file in dirt:

            os.remove(file)
    except Exception as e:
        with open(f'{wrkdir}/GMPP log.txt', 'a') as f:
            f.write(f'Error generating XVG files: {e}\n')

    try:
        with open(f'{wrkdir}/GMPP log.txt', 'a') as f:
            f.write('Performing Bimodality Test\n')
        bimodal, foldingtemp = bt.bimodal(wrkdir)
        
        
        if bimodal == True:
            with open(f'{wrkdir}/GMPP log.txt', 'a') as f:
                f.write(f'Bimodal Temp = {foldingtemp} K\n')
                
            break  # Success - exit the loop
            
        else:
            # Expand temperature range for next iteration
            tlow = tlow + 41
            thigh = thigh + 40
              # Update the tuple
            iteration += 1
            tg.tprgen(tlow, thigh, dt, wrkdir)
            with open(f'{wrkdir}/GMPP log.txt', 'a') as f:
                f.write(f'No bimodal distribution found. Expanding temperature range to {tlow}-{thigh}K\n')
                
    except Exception as e:
        with open(f'{wrkdir}/GMPP log.txt', 'a') as f:
            f.write(f'Error performing bimodality test: {e}\n')
        tlow = tlow + 41
        thigh = thigh + 40
        iteration += 1

    # After the loop, regardless of outcome
try:
    with open(f'{wrkdir}/GMPP log.txt', 'a') as f:
        f.write('Running WHAM analysis\n')
    WHAM.WHAM(wrkdir, tlow, thigh)
except Exception as e:
    with open(f'{wrkdir}/GMPP log.txt', 'a') as f:
        f.write(f'Error running WHAM analysis: {e}\n')
try:
    with open(f'{wrkdir}/GMPP log.txt', 'a') as f:
        f.write('Running Landscape analysis\n')
    cont_file= glob.glob(f'{wrkdir}/*.contacts')
    cont_file = cont_file[0]
    ls.landscape(wrkdir, foldingtemp, cut_off, cont_file)
    with open(f'{wrkdir}/GMPP log.txt', 'a') as f:
        f.write('GMPP has FInished, thank you. ')
except Exception as e:
    with open(f'{wrkdir}/GMPP log.txt', 'a') as f:
        f.write(f'Error running landscape analysis: {e}\n')
dirt = glob.glob('*#')
for file in dirt:
    subprocess.run(f'rm -f {file}')
